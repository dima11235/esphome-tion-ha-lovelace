# Расширение конфигурации ESPHOME для устройства Тион (https://github.com/dentra/esphome-tion)
# Добавляет в HA сервис установки диапазона скоростей для бризера set_fan_speed_range
# Если сервис вызывается только один раз и в течение трех секунд повторного вызова не происходит, то обе скорости устанавливаются в одно значение.
# Если сервис вызвается повторно в течение трех секунд, то устанавливается диапазон скоростей, из первого и второго вызова.
# 
# Вызов сервиса:
#
# service: esphome.your_device_name_set_fan_speed_range
# data:
#   fan_speed: 3
#
# packages:
#   # Добавьте данный пакет в раздел packages
#   tion_auto_mode:
#     url: https://github.com/dima11235/esphome-tion-ha-lovelace
#     files:
#       - esphome/tion_auto_mode.yaml
#       - esphome/tion_set_speed_range.yaml
#

globals:
  - id: last_mode
    type: int
    restore_value: no
    initial_value: '-1'

  - id: mode_timer
    type: int
    restore_value: no
    initial_value: '0'

api:
  services:
    - service: set_fan_speed_range  # Определение нового сервиса set_fan_speed_range
      variables:
        fan_speed: int  # Ожидаемый параметр скорости вентилятора
      then:
        - if:
            condition:
              lambda: 'return fan_speed >= 0 && fan_speed <= 6;'  # Проверка, что скорость в допустимом диапазоне (0-6)
            then:
              - if:
                  condition:
                    lambda: 'return id(mode_timer) == 0;'
                  then:
                    # Если вызов первый
                    - globals.set:
                        id: last_mode
                        value: !lambda 'return fan_speed;'  # Установка последнего режима при первом вызове
                    
                    - logger.log: "Single set_fan_speed_range call detected, setting fixed speed"

                    # Установка значений сокростей для обновления интерфейса и установки первой скорости
                    - number.set:
                        id: min_fan_speed
                        value: !lambda 'return fan_speed;'
                    - number.set:
                        id: max_fan_speed
                        value: !lambda 'return fan_speed;'

                    # Запуск таймера для ожидания повторного вызова
                    - globals.set:
                        id: mode_timer
                        value: '1'  
                    - component.update: mode_timeout

                  else:
                    # Если вызов второй
                    - logger.log: "Repeated set_fan_speed_range call detected, setting range"

                    # Установка диапазона скоростей
                    - number.set:
                        id: min_fan_speed
                        value: !lambda 'return std::min(id(last_mode), fan_speed);'
                    - number.set:
                        id: max_fan_speed
                        value: !lambda 'return std::max(id(last_mode), fan_speed);'

                    # Остановка таймера
                    - globals.set:
                        id: mode_timer
                        value: '0'
                    - component.update: mode_timeout

              - logger.log:
                  format: "Operation mode set to %d"  # Логирование успешного вызова сервиса
                  args: [ 'fan_speed' ]
            else:
              - logger.log:
                  level: ERROR
                  format: "Invalid mode value: %d"  # Логирование ошибки в случае недопустимого значения
                  args: [ 'fan_speed' ]

interval:
  - interval: 3s
    id: mode_timeout
    then:
      - if:
          condition:
            lambda: 'return id(mode_timer) > 0;'
          then:
            - globals.set:
                id: mode_timer
                value: !lambda 'return id(mode_timer) + 1;'
            - if:
                condition:
                  lambda: 'return id(mode_timer) >= 3;'
                then:
                  # Остановка таймера
                  - globals.set:
                      id: mode_timer
                      value: '0'

