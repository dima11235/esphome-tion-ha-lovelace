# Расширение конфигурации ESPHOME для устройства Тион (https://github.com/dentra/esphome-tion)
#
# substitutions:
#   # Добавьте данную подстановку с указанием имени сенсора CO2 в раздел substitutions
#   auto_mode_co2_sensor: sensor.chrn_kitchen_co2
#
# packages:
#   # Добавьте данный пакет в раздел packages
#   tion_auto_mode:
#     url: https://github.com/dima11235/esphome-tion-ha-lovelace
#     files:
#       - esphome/tion_auto_mode.yaml
#

globals:
  - id: sync_timer
    type: int
    restore_value: no
    initial_value: '0'

sensor:
  - platform: tion
    name: "Fan Speed"
    type: fan_speed
    id: current_fan_speed
    icon: "mdi:fan"
    state_class: "measurement"
    accuracy_decimals: 0
    internal: false
            
  - platform: homeassistant
    name: "Current CO2"
    id: current_co2
    entity_id: ${auto_mode_co2_sensor}
    unit_of_measurement: "ppm"
    icon: "mdi:molecule-co2"
    device_class: "carbon_dioxide"
    state_class: "measurement"
    accuracy_decimals: 0
    internal: false

climate:
  - platform: pid
    id: pid_co2
    internal: true
    name: "PID CO2 Controller"
    sensor: current_co2
    default_target_temperature: 750
    cool_output: output_fan_speed
    control_parameters:
      ki: 0.00001
      kd: 0.0
      max_integral: 0.0 # Устраняет инерцию управления при длительном нахождении значения CO2 ниже целевого уровня
      kp: 0.005 # Переход на следующую скорость при повышении уровня CO2 на 25 ppm
      min_integral: -0.167 # Максимальное дополнительное повышение скорости на 1 от интегральной составляющей
      output_averaging_samples: 3

output:
  - platform: template
    id: output_fan_speed
    type: float
    write_action:
      - logger.log: "output_fan_speed: write_action"
      - if:
          condition:
            and:
              - switch.is_on: power_mode
          then:
            - if:
                condition:
                  switch.is_on: silent_mode
                then:
                  - script.execute:
                      id: set_fan_speed
                      fan_speed: 1
                else:
                  - script.execute:
                      id: set_fan_speed
                      fan_speed: !lambda 'return min(max(round(6*state), id(min_fan_speed).state), id(max_fan_speed).state);'

script:
  - id: set_fan_speed
    parameters:
      fan_speed: int
    then:
      - logger.log: "set_fan_speed"
      - if:
          condition:
            lambda: 'return fan_speed != int(id(current_fan_speed).state);'
          then:
            - globals.set: { id: sync_timer, value: "0" }
            - if:
                condition:
                  lambda: 'return fan_speed > 0;'
                then:
                  - climate.control:
                      id: tion_climate
                      mode: !lambda 'return id(heater_mode).state ? CLIMATE_MODE_HEAT : CLIMATE_MODE_FAN_ONLY;'
                      custom_fan_mode: !lambda 'return to_string(fan_speed);'
                      target_temperature: !lambda 'return id(heater_temperature).state;'
                else:
                  - climate.control:
                      id: tion_climate
                      mode: 'OFF'

switch:
  # Переключатель включения бризера
  - platform: template
    name: "Power Mode"
    icon: "mdi:power"
    id: power_mode
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    turn_on_action:
      - logger.log: "switch.power_mode: turn_on_action"
      - globals.set: { id: sync_timer, value: "0" }
      - if:
          condition: 
            lambda: 'return id(max_fan_speed).state == 0;'
          then:
            - number.set:
                id: max_fan_speed
                value: !lambda 'return max(1, int(id(current_fan_speed).state));'
            - number.set:
                id: min_fan_speed
                value: !lambda 'return max(1, int(id(current_fan_speed).state));'
      - script.execute:
          id: set_fan_speed
          fan_speed: !lambda 'return max(1, int(id(current_fan_speed).state));'
      - if:
          condition: 
            lambda: 'return id(min_fan_speed).state != id(max_fan_speed).state;'
          then:
            - climate.control:
                id: pid_co2
                mode: 'COOL'
          else:
            - climate.control:
                id: pid_co2
                mode: 'OFF'
    turn_off_action:
      - logger.log: "switch.power_mode: turn_off_action"
      - globals.set: { id: sync_timer, value: "0" }
      - climate.control:
          id: pid_co2
          mode: 'OFF'
      - script.execute:
          id: set_fan_speed
          fan_speed: 0

  # Переключатель режима подогрева воздуха
  - platform: template
    name: "Heater Mode"
    icon: "mdi:fire"
    id: heater_mode
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    turn_on_action:
      - logger.log: "switch.heater_mode: turn_on_action"
      - globals.set: { id: sync_timer, value: "0" }
      - if: 
          condition: 
            # Не переключаем на нулевой скорости, т.к. при нулевой скорости режим забора воздуха переключается на рециркуляцию
            lambda: 'return id(tion_climate).mode == CLIMATE_MODE_FAN_ONLY && int(id(current_fan_speed).state) > 0;'
          then:
            - climate.control: { id: tion_climate, mode: "HEAT" }
      - wait_until:
          condition:
            switch.is_on: heater_mode
          timeout: 1s
      - switch.turn_on: power_mode
    turn_off_action:
      - logger.log: "switch.heater_mode: turn_off_action"
      - globals.set: { id: sync_timer, value: "0" }
      - if: 
          condition: 
            # Не переключаем на нулевой скорости, т.к. при нулевой скорости режим забора воздуха переключается на рециркуляцию
            lambda: 'return id(tion_climate).mode == CLIMATE_MODE_HEAT && int(id(current_fan_speed).state) > 0;' 
          then:
            - climate.control: { id: tion_climate, mode: "FAN_ONLY" }
      - wait_until:
          condition:
            switch.is_off: heater_mode
          timeout: 1s
      - switch.turn_on: power_mode

  # Переключатель тихого режима (принудительная первая скорость в авто режиме)
  - platform: template
    name: "Silent Mode"
    icon: "mdi:weather-night"
    id: silent_mode
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      - logger.log: "switch.silent_mode: turn_on_action"
      - if:
          condition: 
            switch.is_on: power_mode
          then:
            - script.execute:
                id: set_fan_speed
                fan_speed: 1
    on_turn_off:
      - logger.log: "switch.silent_mode: turn_off_action"
      - if:
          condition: 
            switch.is_on: power_mode
          then:
            - script.execute:
                id: set_fan_speed
                fan_speed: !lambda 'return id(min_fan_speed).state;'

number:
  # Управление температурой подогрева воздуха
  - platform: template
    name: "Heater Temperature"
    icon: "mdi:thermometer"
    id: heater_temperature
    unit_of_measurement: "°C"
    device_class: "temperature"
    min_value: 0
    max_value: 30
    step: 1
    optimistic: true
    restore_value: true
    initial_value: 20
    set_action:
      - logger.log: "number.heater_temperature: set_action"
      - if:
          condition: 
            # Не переключаем на нулевой скорости, т.к. при нулевой скорости режим забора воздуха переключается на рециркуляцию
            lambda: 'return x != id(tion_climate).target_temperature && int(id(current_fan_speed).state) > 0;'
          then:
            - globals.set: { id: sync_timer, value: "0" }
            - climate.control:
                id: tion_climate
                target_temperature: !lambda 'return x;'

  # Установка целевого уровня CO2 для автоматического режима
  - platform: template
    name: "Target CO2"
    id: target_co2
    unit_of_measurement: "ppm"
    icon: "mdi:molecule-co2"
    device_class: "carbon_dioxide"
    min_value: 400
    max_value: 1200
    step: 50
    optimistic: true
    restore_value: true
    initial_value: 750
    set_action:
      - logger.log: "tion_auto_mode: number.target_co2: set_action"
      - if:
          condition: 
            lambda: 'return x != id(pid_co2).target_temperature;'
          then:
            - climate.control:
                id: pid_co2
                target_temperature: !lambda 'return x;'

  # Minimum fan speed in Auto Mode
  - platform: template
    name: "Min Fan Speed"
    icon: "mdi:fan"
    id: min_fan_speed
    min_value: 0
    max_value: 6
    step: 1
    optimistic: true
    restore_value: true
    initial_value: 1
    set_action:
      - logger.log: "tion_auto_mode: number.min_fan_speed: set_action"
      - if:
          condition: 
            lambda: 'return x > id(max_fan_speed).state;'
          then:
            - number.set:
                id: max_fan_speed
                value: !lambda 'return x;'
      - if:
          condition:
            and:
              - switch.is_on: power_mode
              - switch.is_off: silent_mode
              - lambda: 'return x > int(id(current_fan_speed).state);'
          then:
            - script.execute:
                id: set_fan_speed
                fan_speed: !lambda 'return x;'

  # Maximum fan speed in Auto Mode
  - platform: template
    name: "Max Fan Speed"
    icon: "mdi:fan"
    id: max_fan_speed
    min_value: 0
    max_value: 6
    step: 1
    optimistic: true
    restore_value: true
    initial_value: 2
    set_action:
      - logger.log: "tion_auto_mode: number.max_fan_speed: set_action"
      - if:
          condition: 
            lambda: 'return x < id(min_fan_speed).state;'
          then:
            - number.set:
                id: min_fan_speed
                value: !lambda 'return x;'
      - if:
          condition: 
            and:
              - switch.is_on: power_mode
              - switch.is_off: silent_mode
              - lambda: 'return x < int(id(current_fan_speed).state);'
          then:
            - script.execute:
                id: set_fan_speed
                fan_speed: !lambda 'return x;'

interval:
  - interval: 1s
    id: sync_state
    then:
      - if:
          condition:
            # Чтение статуса бризера раз в 10 секунд
            # После выполнения команды на бризере сбросить sync_timer в 0 для задержки выполнения операций на 10 сек
            lambda: 'return id(sync_timer)++ >= 10;' 
          then:
            - globals.set: { id: sync_timer, value: "0" }
            # Включение/отклучение регулятора автоматического режима
            - if:
                condition: 
                  lambda: 'return id(min_fan_speed).state != id(max_fan_speed).state;'
                then:
                  - if:
                      condition: 
                        and:
                          - switch.is_on: power_mode
                          - lambda: 'return id(pid_co2).mode != CLIMATE_MODE_COOL;'
                      then:
                        - climate.control:
                            id: pid_co2
                            mode: 'COOL'
                        - logger.log: "tion_auto_mode: sync state: turn PID on"
                else:
                  - if:
                      condition: 
                        or:
                          - switch.is_off: power_mode
                          - lambda: 'return id(pid_co2).mode != CLIMATE_MODE_OFF;' 
                      then:
                        - climate.control:
                            id: pid_co2
                            mode: 'OFF'
                        - logger.log: "tion_auto_mode: sync state: turn PID off"
            # Чтение с бризера статуса включения
            - if: 
                condition: 
                  and:
                    - lambda: 'return id(tion_climate).mode != CLIMATE_MODE_OFF;' 
                    - switch.is_off: power_mode
                then:
                  - logger.log: "tion_auto_mode: sync state: turn power_mode on"
                  - switch.turn_on: power_mode
            # Чтение с бризера установленной температуры
            - if: 
                condition: 
                  and:
                    - lambda: 'return id(tion_climate).mode == CLIMATE_MODE_HEAT;'
                    - lambda: 'return id(tion_climate).target_temperature != id(heater_temperature).state;' 
                then:
                  - logger.log: "tion_auto_mode: sync state: set heater_temperature"
                  - number.set:
                      id: heater_temperature
                      value: !lambda 'return id(tion_climate).target_temperature;'
            # Чтение с бризера статуса нагревателя
            - if: 
                condition: 
                  and:
                    - lambda: 'return id(tion_climate).mode == CLIMATE_MODE_HEAT;' 
                    - switch.is_off: heater_mode
                then:
                  - logger.log: "tion_auto_mode: sync state: set heater_mode on"
                  - switch.turn_on: heater_mode
            - if: 
                condition: 
                  and:
                    - lambda: 'return id(tion_climate).mode == CLIMATE_MODE_FAN_ONLY;' 
                    - switch.is_on: heater_mode
                then:
                  - logger.log: "tion_auto_mode: sync state: set heater_mode off"
                  - switch.turn_off: heater_mode
