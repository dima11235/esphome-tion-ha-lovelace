# Расширение конфигурации ESPHOME для устройства Тион (https://github.com/dentra/esphome-tion)
#
# substitutions:
#   # Добавьте данную подстановку с указанием имени сенсора CO2 в раздел substitutions
#   auto_mode_co2_sensor: sensor.chrn_kitchen_co2
#
# packages:
#   # Добавьте данный пакет в раздел packages
#   tion_auto_mode:
#     url: https://github.com/dima11235/esphome-tion-ha-lovelace
#     files:
#       # Автоматическое управление скоростью по уровню CO2
#       - esphome/tion_auto_mode.yaml
#       # Добавляет вызов HA, позволяющий устанавливать диапазон скоростей из интерфейса
#       - esphome/tion_set_fan_speed.yaml
#       # Дополнительные необязательные сенсоры, пополняемые по мере надобности
#       - esphome/tion_others.yaml
#

globals:
  - id: last_mode
    type: int
    restore_value: no
    initial_value: '-1'

  - id: mode_timer
    type: int
    restore_value: no
    initial_value: '0'

api:
  services:
    - service: set_fan_speed  # Определение нового сервиса set_fan_speed
      variables:
        fan_speed: int  # Ожидаемый параметр скорости вентилятора
      then:
        - if:
            condition:
              lambda: 'return fan_speed >= 0 && fan_speed <= 6;'  # Проверка, что скорость в допустимом диапазоне (0-6)
            then:
              - if:
                  condition:
                    lambda: 'return id(mode_timer) == 0;' # Если вызов первый
                  then:
                    - logger.log: "tion_set_fan_speed: First set_fan_speed call detected, setting first speed, waiting for second ..."
                    # Сохраняем режим для первого вызова
                    - globals.set:
                        id: last_mode
                        value: !lambda 'return fan_speed;'  
                    # Установка значений диапазона скоростей на первую выбранную скорость и для обновления интерфейса
                    - number.set:
                        id: max_fan_speed
                        value: !lambda 'return fan_speed;'
                    - number.set:
                        id: min_fan_speed
                        value: !lambda 'return fan_speed;'
                    # Запуск таймера для ожидания повторного вызова
                    - globals.set: { id: mode_timer, value: "1" }
                  else:
                    - logger.log: "tion_set_fan_speed: Second set_fan_speed call detected, setting range"
                    # Установка диапазона скоростей
                    - number.set:
                        id: min_fan_speed
                        value: !lambda 'return std::min(id(last_mode), fan_speed);'
                    - number.set:
                        id: max_fan_speed
                        value: !lambda 'return std::max(id(last_mode), fan_speed);'
                    # Остановка таймера
                    - globals.set: { id: mode_timer, value: "0" }
              - logger.log:
                  format: "Fan speed set to %d"  # Логирование успешного вызова сервиса
                  args: [ 'fan_speed' ]
            else:
              - logger.log:
                  level: ERROR
                  format: "Invalid fan speed value: %d"  # Логирование ошибки в случае недопустимого значения
                  args: [ 'fan_speed' ]

interval:
  - interval: 1s
    id: mode_timeout
    then:
      - if:
          condition:
            lambda: 'return id(mode_timer) > 0;'
          then:
            - globals.set:
                id: mode_timer
                value: !lambda 'return id(mode_timer) + 1;'
            - if:
                condition:
                  lambda: 'return id(mode_timer) >= 4;'
                then:
                  - logger.log: "tion_set_fan_speed: No second set_fan_speed call, keep fixed speed"
                  # Остановка таймера
                  - globals.set: { id: mode_timer, value: "0" }
            - logger.log:
                format: "Timer set to %d"
                args: [ 'id(mode_timer)' ]
